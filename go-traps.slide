# Go Traps

Nha Hoang
11 Aug 2023
hdnha11@gmail.com
@hdnha

## Go is a wonderful language. But Go has gotchas.

## #1 Slice traversal

Which languages will be printed? Which won't?

.play -edit go-traps/slicetraversal.go /START OMIT/,/STOP OMIT/

## Discussion

When ranging over a slice with only one variable, it yields the index, not the element.

To iterate over just the elements while ignoring the indexes, use the blank identifier `_`.

If iterating over a `[]int`, be careful.

## #2 String traversal

Can strings also be traversed in Go? Let's try:

.play -edit go-traps/stringtraversal.go /START OMIT/,/STOP OMIT/

## Next try

.play -edit go-traps/stringtraversal2.go /START OMIT/,/STOP OMIT/

## Discussion

**Strings** in Go are slices of bytes (**not required** to be **UTF-8** encoded).

**String literals**, without byte-level escapes, always hold valid **UTF-8** sequences.

The **range** loop assumes **UTF-8** encoding.

The iteration element is the `rune` (like a character), and the index is the `byte` number of the first `byte` of the `rune` (not the number of the `rune`).

Runes represent Unicode **code points**.

: https://go.dev/blog/strings
: https://pkg.go.dev/unicode/utf8#RuneCountInString

## Unicode

A letter maps to a **code point**, which is a theoretical concept (e.g. **U+0048**).

Code points need to be **encoded** to be stored in memory.

It does not make sense to have a string without knowing its encoding.

Encoding: **UTF-8**, **UTF-16**, **UTF-32**

.play -edit go-traps/unicode.go /START OMIT/,/STOP OMIT/

: A code point, codepoint or code position.
: Unicode code points, like U+2318 (‚åò), are expressed in hexadecimal format.
: UTF-8 uses 1, 2, 3 or 4 bytes per code point.
: To print a code point in Go, use %U or %#U over the rune constant, like '‰∏ñ'.
: Some helpful formats to examine a string in Go: %x, % x, %q, %+q.

## #3 Loop variable

.play -edit go-traps/loopvar.go /START OMIT/,/STOP OMIT/

## Loop closure

.play -edit go-traps/loopvar2.go /START OMIT/,/STOP OMIT/

: https://pkg.go.dev/golang.org/x/tools/go/analysis/passes/loopclosure

## Test parallel

.play -edit go-traps/loopvar_test.go /START OMIT/,/STOP OMIT/

## Discussion

Loop variable is per-loop, not per-iteration.

**Go 1.21** supports `GOEXPERIMENT=loopvar` flag, which makes loop variables per-iteration instead of per-loop.

: https://github.com/golang/go/discussions/56010
: https://github.com/golang/go/wiki/LoopvarExperiment

## #4 Variable shadowing

.play -edit go-traps/varshadow.go /START OMIT/,/STOP OMIT/

## Type assertion

.play -edit go-traps/varshadow2.go /START OMIT/,/STOP OMIT/

: If the assertion [doesn't hold], the expression returns (Z, false) where Z is the zero value for type T.
: In this example, x shares the same scope inside the if and else blocks, so reassigning it inside the if block will be visible in the else. However, outside of the if/else, x refers to a separate variable that is still typed as Animal.

## Discussion

Use caution when using `:=` in if statements in Go.

Variable shadowing can happen, especially functions returning `(result, err)` or type assertions like `x.(SomeType)`.

Two different options:
- uses temporary variables in the inner blocks
- uses the assignment operator (`=`) in the inner blocks

## #5 Map fetching/traversal

.play -edit go-traps/map.go /START OMIT/,/STOP OMIT/

## Discussion

Map fetching with **non-existent** key **doesn't panic**, it yields the **zero value** of the element type.

Use the two variables assignment `v, ok := m["four"]` to check if requested key was actually in the map or not. It is called the **"comma ok"** idiom.

There is **no guarantee** regarding the order of iteration in a hash map.

## #6 defer what?

.play -edit go-traps/defer.go /START OMIT/,/STOP OMIT/

## Receivers are arguments

.play -edit go-traps/defer2.go /START OMIT/,/STOP OMIT/

: If the pointer is a receiver, the potential changes to the receiver after the call to defer are visible.

## Discussion

A **defer** statement defers the **execution** of a function until the surrounding function returns.

The deferred call's **arguments** are **evaluated immediately**.

## #7 Nil error

Define a custom **DivByZeroError** type to capture division by zero errors.

.play -edit go-traps/error.go /START READ OMIT/,/STOP READ OMIT/

## Usage

.play -edit go-traps/error.go /START EDIT OMIT/,/STOP EDIT OMIT/

## Discussion

Interfaces are implemented as two elements, a type T and a value V.

An interface value is nil only if the V and T are **both unset**, (T=nil, V is not set).

Functions returning errors should use **error** in signature, not concrete types.

: https://go.dev/doc/faq#nil_error

## #8 Append

.play -edit go-traps/append.go /START OMIT/,/STOP OMIT/

## Discussion

In addition to their **length**, slices in Go have an underlying **capacity**.

The capacity indicates the **maximum size** the slice can grow to **before needing to allocate** new underlying array storage.

When appending to a slice, it can **expand up to its capacity** automatically **without reallocating**. Once capacity is exceeded, a new array is allocated.

üëç Never call **append** without assigning back to the same variable.

: https://go.dev/blog/slices

## #9 Panic recovery

.play -edit go-traps/recover.go /START OMIT/,/STOP OMIT/

## Panic protection helper

.code go-traps/recover.go /START HELPER OMIT/,/STOP HELPER OMIT/

## Discussion

Recover is only useful inside deferred functions.

If the **current goroutine** is panicking, recover captures panic value and resumes normally.

Without recover, panic proceeds up stack, the current goroutine returns, program **crashes**.

Each goroutine must have its own recover, **no global recover**.

: https://go.dev/blog/defer-panic-and-recover

## #10 Embedding

.play -edit go-traps/embed.go /START OMIT/,/STOP OMIT/

## Discussion

Embedding differs from subclassing.

When they are invoked the **receiver** of the method is the **inner type**, not the outer one.

There is **no dynamic** binding (dispatch) in Go.

: https://go.dev/doc/effective_go#embedding

## Links

Go Traps:

.link https://go-traps.appspot.com/

100 Go Mistakes and How to Avoid Them:

.link https://www.manning.com/books/100-go-mistakes-and-how-to-avoid-them
.link https://github.com/teivah/100-go-mistakes

Slide and sample codes:

.link https://github.com/hdnha11/talks
